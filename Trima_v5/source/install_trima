#!/bin/ksh
#---------------------------------------------------------------------------
# Copyright (c) 1997, by Cobe BCT, Inc.  All rights reserved
# install_trima - QNX ksh script, written by WTM 10/27/98
#                 derived from replicat by SBB 07/10/97
#
#---------------------------------------------------------------------------
#ifdef __USAGE
#%C - install an archived Trima version onto an existing Trima hard drive.
#
#
#Usage:
#%C
#
#endif
#---------------------------------------------------------------------------
# Revision History:
# 10/27/98 WTM Creation.
#---------------------------------------------------------------------------
# Move to /d/update...
cd /d/update

me=${0##*/}
startdir=$PWD
target=$PWD"/newroot"

echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"
echo "******                                                 ******"
echo "******             STARTING INSTALL OF                 ******"
echo "******               TRIMA SOFTWARE                    ******"

#
# In version 4 and earlier, the field engineer will still be pressing
# the buttons at this point.  Version 5 and above has already checked
# for buttons released.
#
if [ -z "$V5_PLUS_BOOT" ]
then
echo "******                                                 ******"
echo "******      YOU MAY RELEASE THE STOP AND PAUSE         ******"
echo "******             BUTTONS AT THIS TIME                ******"
fi

echo "******                                                 ******"
echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"
echo "*************************************************************"

#
# Print out the working information.
#
echo "Current directory = ${startdir}"
echo "Target directory = ${target}"

#
# Ensure that the script is only run in the /d/update directory.
#
if [ $startdir != "/d/update" ] ; then
   echo "$me: MUST BE RUN IN /d/update"
   exit 1
fi

#
# Define a install_fail function to handle errors during the
# install process.
#
install_fail ()
{
   if [ -z "$V5_PLUS_BOOT" ]
   then
     #
     # Installing on version 4 or earlier - tell the field engineer
     # that an error has been detected and wait forever
     #
     echo "Install failed"
     while [ 1 ]
     do
       sleep 1
     done
   else
     #
     # Installing on version 5 or later - let sysinit.2 handle the
     # error.
     #
     exit 1
   fi
}

#
# Delete any old target directory.
#
echo "Removing the target directory ${target}"
rm -rf ${target}

#
# Unpax the install.pax file to get all info for install.
#
echo "Restoring install.pax archive to ${startdir}"
pax -r -v -f install.pax
if [ $? -ne 0 ] ; then
  echo "$me: pax error on install.pax archive."
  install_fail 1
fi

#
# Check to see if other installation upgrade utilities exist
#
echo "Checking for necessary files"
for FILE in install_sysinit \
            conv_config_40_to_50 \
            install_boot_image \
            install_crc_verification \
            awk \
            textto \
            qnx_oem.pax \
            trima.pax
do
   if [ ! -f ./$FILE ] ; then
      echo "$me: $FILE not found.  Aborting procedure"
      echo
      install_fail 1
   fi
done

#
# Check for necessary disk space (MINSPACE is in kBytes)
#
MINSPACE=150000
df /d | ./awk "\$5 < $MINSPACE { exit 1 }"
if [ $? -ne 0 ]; then
   echo "Insufficient disk space for install - attempting to free some space ..."
   pax -r -f trima.pax -s :/trima/config/cfg_bin/:: /trima/config/cfg_bin/logpreserver
   if [ ! -f ./logpreserver ]; then
      echo "Error extracting logpreserver from archive.  Aborting procedure"
      echo
      install_fail 1
   fi
   
   ./logpreserver > /d/run_data/logpreserver.out 2>&1
   rm -f logpreserver

   df /d | ./awk "\$5 < $MINSPACE { exit 1 }"
   if [ $? -ne 0 ]; then
      echo "Unable to free sufficient space for install.  Aborting procedure"
      echo
      install_fail 1
   fi
fi

#
# Restore qnx_oem.pax archive
#
echo "Restoring QNX OEM archive to ${target}"
pax -r -v -s ",^/,${target}/," -f qnx_oem.pax
if [ $? -ne 0 ] ; then
  echo "$me: pax error on qnx_oem.pax archive."
  install_fail 1
fi

#
# Restore trima.pax archive
#
echo "Restoring Trima object code archive to ${target}"
pax -r -v -s ",^/,${target}/," -f trima.pax
if [ $? -ne 0 ] ; then
  echo "$me: pax error on trima.pax archive."
  install_fail 1
fi

#
# Make sure /d/tools exists, and copy the textto utility there.
# This is used later in the install script, and is also used
# by the standard Trima startup script.
#
if [ ! -d /d/tools ] ; then
  rm -f /d/tools
  mkdir /d/tools
  chmod a+rwx /d/tools
fi

cp textto /d/tools/textto
chmod a+x /d/tools/textto

#
# Copy passwd, boot images, machine configuration files to correct places
#
echo "Copying special files..."
cp -p -v ${target}/trima/config/cfg_build/hard.2.image ${target}/.boot
cp -p -v ${target}/trima/config/cfg_build/hard.2.image ${target}/.altboot
#
# Generate CRC's
#
echo "Generating CRC's..."
${target}/trima/softcrc/machcrc \
     -filelist ${target}/trima/softcrc/filelists/safety.files \
     -update /tmp/safety.crc \
     -chroot ${target}
cp -p /tmp/safety.crc ${target}/trima
chmod a-w ${target}/trima/safety.crc

echo "Trima 5.0 upgrade"
# Remove obsolete /d/machine/cfg_main.dat, if it exists
#
echo "Attempting to remove obsolete /d/machine/cfg_main.dat"
rm -f /d/machine/cfg_main.dat

#
# Check to see if the /d/machine/config.dat exists, if it doesn't
# then update the machine to the new config type.
#
echo "Attempting to find /d/machine/config.dat"
if [ ! -f /d/machine/config.dat ] ; then
   echo "No /d/machine/config.dat updating to Trima 5.0 version..."
   cp -p -v ${target}/trima/templates/config.dat /d/machine
else
        chmod a+w /d/machine/config.dat
        /d/tools/textto -l /d/machine/config.dat > /d/tmp/textto.out
        
        grep key_custom_ratio /d/machine/config.dat >/dev/null 2>/dev/null 
        if [ $? = 0 ]
        then
           echo "Found Trima 5.0 /d/machine/config.dat not updating..."
        else
                echo "Updating /d/machine/config.dat to Trima version 5.0..."
                /d/update/conv_config_40_to_50 >/d/update/config_40_to_50.log 2>&1
        fi
fi

#
# Check to see if the 5.0 /d/machine/cal.dat exists, if it doesn't
# then update the machine to the new cal.dat configuration.
#
echo "Attempting to find /d/machine/cal.dat"
if [ ! -f /d/machine/cal.dat ] ; then
   echo "No /d/machine/cal.dat: updating from templates..."
   cp -p -v ${target}/trima/templates/cal.dat /d/machine
else
        echo "Updating /d/machine/cal.dat........."
        chmod a+w /d/machine/cal.dat
        /d/tools/textto -l /d/machine/cal.dat > /d/tmp/textto.out
        
        cp -f ${target}/trima/templates/cal.dat cal.dat.50.tmp
        for i in "aps_raw_pos" "aps_raw_ref" "aps_raw_neg" "cps_gain" "cps_offset" "init_red_drive" "init_green_drive"
        do
                KEY=$(grep ^$i= /d/machine/cal.dat | ./awk -F = '{print $1}')
                RETAINVAL=$(grep ^$i= /d/machine/cal.dat)
                echo "KEY=$KEY,RETAINVAL:$RETAINVAL" 
                cat cal.dat.50.tmp | /bin/sed s/$KEY'.*$'/$RETAINVAL/ >cal.dat.50.tmp1
                mv -f cal.dat.50.tmp1 cal.dat.50.tmp
        done
        cp -f -v /d/machine/cal.dat /d/machine/cal.dat.40
        cp -f -v cal.dat.50.tmp /d/machine/cal.dat
        rm -f -v cal.dat.50.tmp
        chmod a-w /d/machine/cal.dat
fi

#
#   Update aux data files
#
echo "Updating rbc.dat from templates..."
cp -p -v ${target}/trima/templates/rbc.dat /d/machine

#
# Check for existing hw.dat.  Update if necessary
#
echo "Attempting to find /d/machine/hw.dat"
if [ ! -f /d/machine/hw.dat ] ; then
   if [ -f /d/machine/hw4.dat ] ; then
      echo "Converting existing /d/machine/hw4.dat to /d/machine/hw.dat"
      cp -f ${target}/trima/templates/hw.dat hw.dat.tmp
      for i in "serial_driver" "crt_driver"
      do
         grep "^$i=" /d/machine/hw4.dat > /dev/null 2>&1
         if [ $? -eq 0 ] ; then 
            KEY=$(grep ^$i= /d/machine/hw4.dat | ./awk -F = '{print $1}')
            RETAINVAL=$(grep ^$i= /d/machine/hw4.dat)
            echo "KEY=$KEY,RETAINVAL:$RETAINVAL" 
            cat hw.dat.tmp | /bin/sed s@^$KEY'.*$'@"$RETAINVAL"@ >hw.dat.tmp1
            mv -f hw.dat.tmp1 hw.dat.tmp
         fi
      done

      grep "^control_hardware_initialization=auto" /d/machine/hw4.dat >/dev/null 2>&1
      if [ $? -eq 0 ] ; then
         cat hw.dat.tmp | /bin/sed s/^control_hardware_initialization'.*$'/"control_hardware_initialization=auto"/ > hw.dat.tmp1
         mv -f hw.dat.tmp1 hw.dat.tmp
      fi
       
      cp -f -v hw.dat.tmp /d/machine/hw.dat
      chmod a-w /d/machine/hw.dat
   else
      echo "No /d/machine/hw.dat, copying from templates..."
      cp -p -v ${target}/trima/templates/hw.dat /d/machine/hw.dat
   fi
else
   grep "file_version=" /d/machine/hw.dat >/dev/null 2>&1
   if [ $? -ne 0 ]
   then
      echo "Found obsolete hw.dat, updating to new version"
      cp -p -v 
      cp -p -v ${target}/trima/templates/hw.dat /d/machine/hw.dat
   else
      CURRENT_HWDAT_VERSION=`grep "file_version=" /d/machine/hw.dat`
      TEMPLATE_HWDAT_VERSION=`grep "file_version=" ${target}/trima/templates/hw.dat`
      if [ "$CURRENT_HWDAT_VERSION" != "$TEMPLATE_HWDAT_VERSION" ]
      then
         echo "Template version of hw.dat differs from current version"
	 mv /d/machine/hw.dat /d/machine/hw.dat.archive
	 cp -p -v ${target}/trima/templates/hw.dat /d/machine/hw.dat
      fi
   fi
fi

#
# Check to see if the 5.0 /d/machine/globvars exists, if it doesn't
# then update the machine to the new globvars configuration.
#
echo "Attempting to find /d/machine/globvars"
if [ ! -f /d/machine/globvars ] ; then
   echo "No /d/machine/globvars updating to 5.0 version..."
   echo "Machine needs to be customized..................."
   cp -p -v ${target}/trima/config/globvars.default /d/machine/globvars
else
        chmod a+w /d/machine/globvars
        /d/tools/textto -l /d/machine/globvars > /d/tmp/textto.out

        grep EVEREST /d/machine/globvars >/dev/null 2>/dev/null
        if [ $? = 0 ]
        then
                echo "Found 4.0 globvars.  Updating /d/machine/globvars........."
                cp -f ${target}/trima/config/globvars.default /d/machine/globvars.50.tmp
                for i in "MACHINE" "AN2IP" "AN2BIP" "CENPID" "SENPID" "ENPID486I" 
                do
                        KEY=$(grep ^$i= /d/machine/globvars | ./awk -F = '{print $1}')
                        RETAINVAL=$(grep ^$i= /d/machine/globvars)
                        echo "KEY=$KEY,RETAINVAL:$RETAINVAL" 
                        cat /d/machine/globvars.50.tmp | /bin/sed s/^$KEY'.*$'/$RETAINVAL/ >/d/machine/globvars.50.tmp1
                        mv -f /d/machine/globvars.50.tmp1 /d/machine/globvars.50.tmp
                done
                cp -f -v /d/machine/globvars /d/machine/globvars.40
                cp -f -v /d/machine/globvars.50.tmp /d/machine/globvars
                rm -f -v /d/machine/globvars.50.tmp
        else
                echo "Found 5.0 /d/machine/globvars.  Not updating..."
        fi

        chmod a-w /d/machine/globvars
fi
echo "End of Trima 5.0 Upgrade of machine-specific files...."

#
# Ensure that the CRC of the config file is correct.
#
echo "Updating the CRC of the config file."
${target}/trima/softcrc/machcrc \
     -filelist ${target}/trima/softcrc/filelists/config.files \
     -update /d/machine/crc/config.crc

#
# Run CRC of entire hard disk, using the machcrc program that was just
# installed on the target disk.
#
echo "Beginning CRC check of target hard disk"
${target}/trima/softcrc/machcrc \
      -filelist ${target}/trima/softcrc/filelists/trima.files \
      -chroot ${target} \
      -filelist ${target}/trima/softcrc/filelists/focgui.files \
      -chroot ${target} \
      -filelist ${target}/trima/softcrc/filelists/qnx.files \
      -chroot ${target} \
      -verify ${target}/trima/disk.crc
if [ $? -ne 0 ] ; then
   echo "$me: target disk CRC did not match expected value."
   echo "The installation was not complete."
   install_fail 1
fi

#
# Create directory structure for Trima install
#
echo "Ensure directories in 'd' partition exist..."
mkdir -p /d/machine/crc
mkdir -p /d/run_data
mkdir -p /d/log
mkdir -p /d/everest
mkdir -p /d/s_dumper
mkdir -p /d/c_dumper
mkdir -p /d/savedata
mkdir -p /d/service
mkdir -p /d/archive
mkdir -p /d/update
mkdir -p /d/tmp
mkdir -p ${target}/etc/config/absf

#
# Create symbolic links to certain files/directories
#
echo "Creating symlinks..."
for LinkPair in \
  "${target}/run_data -> /d/run_data" \
  "${target}/log -> /d/log" \
  "${target}/everest -> /d/everest" \
  "${target}/c_dumper -> /d/c_dumper" \
  "${target}/s_dumper -> /d/s_dumper" \
  "${target}/tmp -> /d/tmp" \
  "${target}/focus -> /trima" \
  "${target}/etc/hosts -> /d/tmp/hosts" \
  "${target}/etc/config/netmap -> /d/tmp/netmap" \
  "${target}/etc/config/absf/absf.2 -> /d/machine/absf.2" \
  "${target}/etc/config/altsysinit -> /trima/config/altsysinit" \
  "${target}/etc/config/netboot -> /trima/config/netboot" \
  "${target}/etc/profile -> /trima/config/profile" \
  "${target}/etc/config/sysinit.1 -> /trima/config/sysinit.1" \
  "${target}/etc/config/sysinit.2 -> /trima/config/sysinit.2" \
  "${target}/qnx4/photon/palette/focussed.pal -> /trima/gui/focussed.pal" \
  "${target}/qnx4/photon/font/fontopt -> /trima/config/cfg_photon/fontopt" \
  "${target}/etc/config/trap/input.2 -> /trima/config/cfg_photon/input.2" \
  "${target}/etc/inetd.conf -> /trima/config/cfg_tcpip/inetd.conf" \
  "${target}/etc/networks -> /trima/config/networks" \
  "${target}/etc/services -> /trima/config/services" \
  "${target}/etc/protocols -> /trima/config/protocols"
do
  PtrName=${LinkPair%%' '*} ; PtrDest=${LinkPair##*' '}
  if ln -fs "$PtrDest" "$PtrName" ; then
     :
  else
     echo "Error making link: $LinkPair" ; install_fail 1
  fi
done

echo "Setting permissions on machine directory ..."
chmod 777 /d
cd /d/machine
chown root:root absf.2 cal.dat rbc.dat hw.dat config.dat globvars meter.dat meter.bak
chown -R root:root crc
chmod a-w absf.2
cd /
chmod -R a-w /d/machine
chmod -R a-w /d/everest
chmod 777 /d/s_dumper
chmod 777 /d/c_dumper
echo "Setting permissions on service directory ..."
chmod a+rw /d/service
echo "Setting permissions on archive directory ..."
chmod a+rw /d/archive
echo "Setting permissions on update directory ..."
chmod a+rw /d/update

#
# Move the 3.2 versions of cal.dat, config.dat and globvars to the archive
#
if test -f /d/machine/cal.dat.40
then
        mv -vf /d/machine/cal.dat.40 /d/archive
fi
if test -f /d/update/config_40_to_50.log
then
        mv -vf /d/update/config_40_to_50.log /d/archive
fi
if test -f /d/machine/config.dat.40
then
        mv -vf /d/machine/config.dat.40 /d/archive
fi
if test -f /d/machine/globvars.40
then
        mv -vf /d/machine/globvars.40 /d/archive
fi
if test -f /d/machine/hw.dat.archive
then
	mv -vf /d/machine/hw.dat.archive /d/archive
fi

#
# Remove obsolete /d/machine/licenses directory, if it exists
#
echo "Attempting to remove obsolete /d/machine/licenses directory"
if test -d /d/machine/licenses
then
        rm -rf /d/machine/licenses
fi

#
# Check to see if /d/machine/trap_override.dat exists, if it doesn't then
# update the machine to the new trap_override configuration if necessary.
#
if [ -f ${target}/trima/templates/trap_override.dat ] ; then
   echo "Attempting to find /d/machine/trap_override.dat"
   if [ ! -f /d/machine/trap_override.dat ] ; then
      echo "No /d/machine/trap_override.dat updating from templates..."
      cp -p -v ${target}/trima/templates/trap_override.dat /d/machine
   else
      echo "Found /d/machine/trap_override.dat not updating..."
   fi
fi

#
# Check to see if /trima/config/trap_default.dat exists, if it doesn't then
# update the machine to the new trap_default configuration if necessary.
#
if [ -f ${target}/trima/config/trap_default.dat ] ; then
   echo "Attempting to find /trima/config/trap_default.dat"
   if [ ! -f /trima/config/trap_default.dat ] ; then
      echo "No /trima/config/trap_default.dat updating from templates..."
      cp -p -v ${target}/trima/config/trap_default.dat /trima/config
   else
      #
      # If it already exists, we need to copy it back to the install target
      # area, since the entire /trima tree is overwritten from here during the
      # second stage of the install process.
      #
      echo "Found /trima/config/trap_default.dat not updating..."
      cp -p -v /trima/config/trap_default.dat ${target}/trima/config
   fi
fi

#
# Ensure that the CRC of the machine directory is correct.
#
echo "Updating the CRC of the machine directory."
${target}/trima/softcrc/machcrc \
     -filelist ${target}/trima/softcrc/filelists/machine.files \
     -update /tmp/machine.crc 
cp -p /tmp/machine.crc /d/machine/crc/machine.crc
chmod a-w /d/machine/crc/machine.crc

${target}/trima/softcrc/machcrc \
     -filelist ${target}/trima/softcrc/filelists/caldat.files \
     -update /tmp/caldat.crc 
cp -p /tmp/caldat.crc /d/machine/crc/caldat.crc
chmod a-w /d/machine/crc/caldat.crc

${target}/trima/softcrc/machcrc \
     -filelist ${target}/trima/softcrc/filelists/rbcdat.files \
     -update /tmp/rbcdat.crc 
cp -p /tmp/rbcdat.crc /d/machine/crc/rbcdat.crc
chmod a-w /d/machine/crc/rbcdat.crc

${target}/trima/softcrc/machcrc \
     -filelist ${target}/trima/softcrc/filelists/hwdat.files \
     -update /tmp/hwdat.crc 
cp -p /tmp/hwdat.crc /d/machine/crc/hwdat.crc
chmod a-w /d/machine/crc/hwdat.crc

#
# Copy the install .boot to /.boot
#
cp ${startdir}/install_boot_image /.boot

#
# Done with procedure.
#
cat << END_OF_MESSAGE

The machine will now reboot and finish the install of the software.
While the machine is in the reboot mode you will not be able to
get any service mode services, so please do not attempt to enter
service mode. Thank you...

Machine is shutting down...

END_OF_MESSAGE

sleep 5
set +vx
unset me startdir workdir cflag Dflag lflag nflag
unset opterr device target lpath FILE

shutdown -f
sleep 10

exit 0
